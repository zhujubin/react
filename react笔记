vscode设置自动补全标签
zai设置中添加：
"emmet.includeLanguages": {
    "javascript": "javascriptreact"
}

组件：
    组件的返回值只能有一个根元素。这也是我们要用一个<div>来包裹所有<Welcome />元素的原因。

props: 父组件向子组件传递数据的方式

state: 
  需要放进state的情况：
    1、不是从props中传进来
    2、随着时间推移而改变
    3、不可以从其他state和props中计算得出

确定组件对应的state：
    1：确定每个需要这个state渲染的组件
    2: 找到一个公共所有者组件
    3：这个公共所有者组件或另一个更高层级组件需要这个state
    4：如果没有这样的组件，创建一个仅用来存放状态的组件，存放在比这个公共所有者组件层级更高的地方

    状态始终是局部或者封装的，除了拥有并设置他的组件外，其他组件不能访问


组件更新重用：
    构造函数是唯一能够初始化 this.state 的地方
    将函数转换成class组件

状态更新可能是异步的:
  因为 this.props 和 this.state 可能是异步更新的，你不应该依靠它们的值来计算下一个状态。
  this.setState((prevState, props) => ({
    counter: prevState.counter + props.increment
  }));

状态更新合并：
      只更新一部分，最后合并到一起。

单向数据流：
    任何状态始终由某些特定组件所有，并且从该状态导出的任何数据或 UI 只能影响树中下方的组件


事件处理：
    语法传统的为onclick React为驼峰式写法onClick
    阻止默认事件的语法，你必须要用preventDefault，而不能使用返回false来进行阻止

解决bind(this)问题:
    1:在调用回调函数是使用arrow function
    2：使用属性初始化器
    3:在构造函数中绑定this

通过 bind 方式向监听函数传参，在类组件中定义的监听函数，事件对象 e 要排在所传递参数的后面

条件渲染：
    1：控制组件中的状态
    2：运算符&& true && expression 总是返回 expression  false 返回false
    3：三目运算
    4：阻止组建渲染返回 null
 
表单控件：使用空间中的value 和 setState进行与输入的值保持同步
